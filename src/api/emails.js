import { toast } from "react-toastify";

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è authData
const getAuthData = () => {
  const authData = JSON.parse(localStorage.getItem("authData") || "{}");
  if (!authData.accessToken || !authData.provider || !authData.email) {
    throw new Error("Authentication data is missing");
  }
  return authData;
};

export const fetchEmails = async (category = "INBOX", beforeUid) => {
  try {
    const authData = JSON.parse(localStorage.getItem("authData") || "{}");
    const accessToken = authData.accessToken;
    const provider = authData.provider;
    const email = authData.email;

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –±–µ–∑ accessToken –≤ query
    const baseUrl = `http://localhost:8080/api/mail/receive`;
    const queryParams = new URLSearchParams({
      category,
      provider,
      email,
    });
    if (beforeUid) {
      queryParams.append("beforeUid", beforeUid);
    }
    const url = `${baseUrl}?${queryParams.toString()}`;

    const response = await fetch(url, {
      headers: {
        Authorization: `Bearer ${accessToken}`, // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      },
    });

    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º");
    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º:", error);
    return { totalMessages: 0, messages: [] };
  }
};


export const markEmailAsRead = async (uids) => {
  try {
    const response = await fetch("http://localhost:3001/mark-read", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ uids }),
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Å—å–º–∞");
    }

    const data = await response.json();
    console.log("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏:", data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Å—å–º–∞:", error);
  }
};  

export const sendEmail = async (email) => {
  try {
    const formData = new FormData();
    formData.append("to", email.to.trim());
    formData.append("subject", email.subject.trim());
    formData.append("html", email.body.trim());

    if (email.attachments && email.attachments.length > 0) {
      email.attachments.forEach((attachment) => {
        console.log("üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª:", attachment.name); // –û—Ç–ª–∞–¥–∫–∞
        formData.append("attachments", attachment.fileObj, attachment.name);
      });
    }

    console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ:", Object.fromEntries(formData)); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è

    const response = await fetch("http://localhost:3001/send", {
      method: "POST",
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ${await response.text()}`);
    }

    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", error);
    throw error;
  }
};

export const moveEmailToTrash = async (uid, sourceFolder) => {
  try {
    const { accessToken, provider, email } = getAuthData();

    const response = await fetch("http://localhost:8080/api/mail/move-to-trash", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify({
        providerName: provider,
        email,
        uid,
        sourceFolder,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || `Failed to move email: ${response.statusText}`);
    }

    const result = await response.json();
    toast.success(result);
    return result;
  } catch (error) {
    console.error("Error moving email to trash:", error);
    toast.error("Failed to move email to trash.");
    throw error;
  }
};




export const deleteEmailForever = async (uid, currentFolder) => {
  const response = await fetch("http://localhost:3001/delete-forever", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ uid, currentFolder }),
  });

  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞");
  return await response.json();
};

export const markEmailsAsRead = async (uids) => {
  if (!uids || uids.length === 0) {
    console.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–ø—Ä–æ—Å: –Ω–µ—Ç UID –ø–∏—Å–µ–º –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö.");
    return;
  }

  try {
    const response = await fetch("http://localhost:3001/mark-read-batch", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ uids }),
    });

    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ø–∏—Å–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö");

    console.log("‚úÖ –ü–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:", uids);
    return await response.json();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –ø–∏—Å–µ–º:", error);
    throw error;
  }
};

export const fetchEmailsFromSender = async (senderEmail) => {
  try {
    const response = await fetch(`http://localhost:3001/emails-from-sender?sender=${senderEmail}`);
    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º");
    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º:", error);
    return [];
  }
};

export const fetchEmailsSentTo = async (recipientEmail) => {
  try {
    const response = await fetch(`http://localhost:3001/emails-sent-to?recipient=${recipientEmail}`);
    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º");
    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º:", error);
    return [];
  }
};

export const downloadAttachment = async (uid, filename) => {
  try {
    const response = await fetch(`http://localhost:3001/download-attachment?uid=${uid}&filename=${filename}`);
    if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞");

    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
  }
};

