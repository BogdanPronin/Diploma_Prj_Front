import { useState, useEffect } from "react";
import ContentHeader from "./ContentHeader";
import EmailDetails from "./EmailDetails";
import EmailList from "./EmailList";
import ComposeEmail from "./ComposeEmail";
import SideNav from "./SideNav";
import { fetchEmails, deleteEmail, sendEmail } from "../api/emails"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º API-—Ñ—É–Ω–∫—Ü–∏–∏
import Modal from "react-modal";

Modal.setAppElement('#root'); // –¥–ª—è accessibility

export default function Main() {
  const [selectedEmail, setSelectedEmail] = useState(null);
  const [isComposing, setIsComposing] = useState(false);
  const [category, setCategory] = useState("INBOX");
  const [emails, setEmails] = useState([]); // –°–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
  const [drafts, setDrafts] = useState([]); // –°–ø–∏—Å–æ–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
  const [currentDraft, setCurrentDraft] = useState(null); // –¢–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    console.log(`üì© –ó–∞–ø—Ä–æ—Å –ø–∏—Å–µ–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
    fetchEmails(category).then((data) => {
      console.log(`‚úÖ –ü–∏—Å—å–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: `, data);
      setEmails(data);
    });
  }, [category]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–µ–ø—É—Å—Ç—ã–º
  const isDraftNotEmpty = (draft) => {
    return draft && (draft.to.trim() || draft.subject.trim() || draft.body.trim());
  };

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞
  const handleCompose = () => {
    if (isDraftNotEmpty(currentDraft)) {
      setDrafts((prevDrafts) =>
        prevDrafts.some((d) => d.uid === currentDraft.uid)
          ? prevDrafts.map((d) => (d.uid === currentDraft.uid ? currentDraft : d))
          : [...prevDrafts, { ...currentDraft, uid: Date.now() }]
      );
    }
    setSelectedEmail(null);
    setIsComposing(true);
    setCurrentDraft({ uid: Date.now(), to: "", subject: "", body: "" });
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å—å–º–∞ (–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ "Trash")
  const handleDeleteEmail = (emailId) => {
    console.log(`üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ uid: ${emailId}...`);

    deleteEmail(emailId)
      .then(() => {
        console.log(`‚úÖ –ü–∏—Å—å–º–æ uid ${emailId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ "Trash".`);

        // üî• –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–π—Ç
        setEmails((prevEmails) => {
          const updatedEmails = prevEmails.filter((email) => email.uid !== emailId);
          console.log("üì© –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º:", updatedEmails);
          return updatedEmails;
        });

        setSelectedEmail(null);
      })
      .catch((error) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞:", error));
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∏—Å—å–º–∞ (–µ—Å–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä)
  const handleSelectEmail = (email) => {
    if (isComposing && isDraftNotEmpty(currentDraft)) {
      setDrafts((prevDrafts) =>
        prevDrafts.some((d) => d.uid === currentDraft.uid)
          ? prevDrafts.map((d) => (d.uid === currentDraft.uid ? currentDraft : d))
          : [...prevDrafts, { ...currentDraft, uid: Date.now() }]
      );
      setCurrentDraft(null);
    }

    if (category === "Drafts") {
      setIsComposing(true);
      setCurrentDraft(email);
      setSelectedEmail(email);
    } else {
      setIsComposing(false);
      setSelectedEmail(email);
    }
  };

  return (
    <main className="flex flex-row w-full h-screen bg-dark-600 overflow-hidden">
      <SideNav onSelectCategory={setCategory} />
      <div className="flex flex-col flex-grow">
        <ContentHeader />

        <div className="flex flex-row flex-grow h-[calc(100%-64px)] overflow-hidden">
          
          <div className="w-[35%] h-full overflow-hidden">
            <EmailList
              onSelectEmail={handleSelectEmail}
              category={category}
              onCompose={handleCompose}
              drafts={drafts}
              selectedEmail={selectedEmail}
              emails={emails} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Å–µ–º
            />
          </div>

          <div className="flex-grow h-full">
            {isComposing ? (
              <ComposeEmail
                isOpen={isComposing}
                onRequestClose={() => setIsComposing(false)}
                onSendEmail={(email) => {
                  sendEmail(email)
                    .then((res) => {
                      console.log("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", res);
                      setIsComposing(false);
                      setCurrentDraft(null);
                    })
                    .catch((error) => {
                      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:", error);
                    });
                }}
                draft={currentDraft}
                setDraft={setCurrentDraft}
              />

            ) : selectedEmail ? (
              <EmailDetails
                email={selectedEmail}
                setSelectedEmail={setSelectedEmail}
                onEmailDeleted={handleDeleteEmail} // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
              />
            ) : (
              <div className="flex h-full items-center justify-center text-light-200">
                –í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Å—å–º–æ
              </div>
            )}
          </div>
        </div>

      </div>


    </main>
  );
}
