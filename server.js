require('dotenv').config();
const express = require('express');
const nodemailer = require('nodemailer');
const Imap = require('node-imap');
const { simpleParser } = require('mailparser');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ mail.ru –±–µ—Ä—ë—Ç—Å—è –∏–∑ .env
const mailConfig = {
  user: process.env.MAIL_USER,
  pass: process.env.MAIL_PASS
};

/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞.
 */
const multer = require('multer');
const upload = multer({ storage: multer.memoryStorage() }); // —Ö—Ä–∞–Ω–∏–º —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç–∏

app.post('/send', upload.array('attachments'), async (req, res) => {
  const { to, subject, html } = req.body;
  const attachments = req.files;

  const transporter = nodemailer.createTransport({
    host: 'smtp.mail.ru',
    port: 465,
    secure: true,
    auth: {
      user: mailConfig.user,
      pass: mailConfig.pass,
    },
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è nodemailer
  const formattedAttachments = attachments?.map(file => ({
    filename: file.originalname,
    content: file.buffer,
  }));

  try {
    let info = await transporter.sendMail({
      from: mailConfig.user,
      to,
      subject,
      html,
      attachments: formattedAttachments, // –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
    });

    res.json({ message: '–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', info });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error);
    res.status(500).json({ error: error.toString() });
  }
});


/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º –∏–∑ –ø–∞–ø–∫–∏ "–í—Ö–æ–¥—è—â–∏–µ".
 * –ü–æ–º–∏–º–æ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º UID, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤.
 */
app.get('/receive', (req, res) => {
  const category = req.query.category || "INBOX";
  const beforeUid = req.query.beforeUid; // üëà –î–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–∏—Å–µ–º
  const limit = Number(req.query.limit) || 10;

  const imap = new Imap({
    user: mailConfig.user,
    password: mailConfig.pass,
    host: 'imap.mail.ru',
    port: 993,
    tls: true
  });

  function openCategory(callback) {
    imap.openBox(category, true, callback);
  }

  imap.once('ready', () => {
    openCategory((err, box) => {
      if (err) {
        res.status(500).json({ error: err.toString() });
        imap.end();
        return;
      }

      // –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
      imap.search(['UNSEEN'], (err, unreadResults) => {
        if (err) {
          res.status(500).json({ error: err.toString() });
          imap.end();
          return;
        }

        const totalUnreadMessages = unreadResults.length;

        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∏—Å–µ–º (–∏–ª–∏ –ø–∏—Å–µ–º —Å—Ç–∞—Ä—à–µ beforeUid)
        const searchCriteria = beforeUid 
          ? [['UID', `1:${beforeUid - 1}`]] // –ø–∏—Å—å–º–∞ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ UID
          : ['ALL'];

        imap.search(searchCriteria, (err, results) => {
          if (err || !results.length) {
            imap.end();
            return res.json({ 
              totalMessages: box.messages.total, 
              totalUnreadMessages: totalUnreadMessages,
              messages: [] 
            });
          }

          const latestUids = results.slice(-limit).reverse();

          const messages = [];
          const fetch = imap.fetch(latestUids, { bodies: '', struct: true });

          fetch.on('message', (msg) => {
            let buffer = '';
            let attributes = {};

            msg.on('body', (stream) => {
              stream.on('data', (chunk) => {
                buffer += chunk.toString('utf8');
              });
            });

            msg.once('attributes', (attrs) => {
              attributes = attrs;
            });

            msg.once('end', () => {
              simpleParser(buffer, (err, parsed) => {
                if (!err) {
                  messages.push({
                    uid: attributes.uid,
                    subject: parsed.subject,
                    from: parsed.from,
                    to: parsed.to,
                    date: parsed.date,
                    text: parsed.text,
                    html: parsed.html,
                    isRead: attributes.flags.includes('\\Seen')
                  });
                }

                if (messages.length === latestUids.length) {
                  messages.sort((a, b) => new Date(b.date) - new Date(a.date));

                  imap.end();
                  res.json({ 
                    totalMessages: box.messages.total, 
                    totalUnreadMessages: totalUnreadMessages,
                    messages 
                  });
                }
              });
            });
          });

          fetch.once('error', (err) => {
            res.status(500).json({ error: err.toString() });
            imap.end();
          });
        });
      });
    });
  });

  imap.once('error', (err) => {
    res.status(500).json({ error: err.toString() });
  });

  imap.connect();
});




/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ" –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º.
 * –û–∂–∏–¥–∞–µ—Ç—Å—è POST-–∑–∞–ø—Ä–æ—Å —Å JSON: { uids: [12345, 12346, ...] }
 */
app.post('/mark-read', (req, res) => {
  const { uids } = req.body;
  if (!uids || !Array.isArray(uids) || !uids.length) {
    return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ UID —Å–æ–æ–±—â–µ–Ω–∏–π.' });
  }

  const imap = new Imap({
    user: mailConfig.user,
    password: mailConfig.pass,
    host: 'imap.mail.ru',
    port: 993,
    tls: true
  });

  function openInbox(callback) {
    // –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –≤ —Ä–µ–∂–∏–º–µ read-write (false)
    imap.openBox('INBOX', false, callback);
  }

  imap.once('ready', () => {
    openInbox((err, box) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ INBOX:', err);
        res.status(500).json({ error: err.toString() });
        imap.end();
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ \Seen –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö UID
      imap.addFlags(uids, ['\\Seen'], (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ \\Seen:', err);
          res.status(500).json({ error: err.toString() });
        } else {
          res.json({ message: '–ü–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.' });
        }
        imap.end();
      });
    });
  });

  imap.once('error', (err) => {
    console.error('–û—à–∏–±–∫–∞ IMAP:', err);
    res.status(500).json({ error: err.toString() });
  });

  imap.once('end', () => {
    console.log('IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  });

  imap.connect();
});

app.get('/folders', (req, res) => {
  const imap = new Imap({
    user: mailConfig.user,
    password: mailConfig.pass,
    host: 'imap.mail.ru',
    port: 993,
    tls: true
  });

  imap.once('ready', () => {
    imap.getBoxes((err, boxes) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫:', err);
        res.status(500).json({ error: err.toString() });
      } else {
        console.log('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏:', Object.keys(boxes));
        res.json(Object.keys(boxes)); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –Ω–∞ —Ñ—Ä–æ–Ω—Ç
      }
      imap.end();
    });
  });

  imap.once('error', (err) => {
    console.error('–û—à–∏–±–∫–∞ IMAP:', err);
    res.status(500).json({ error: err.toString() });
  });

  imap.once('end', () => {
    console.log('IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  });

  imap.connect();
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
